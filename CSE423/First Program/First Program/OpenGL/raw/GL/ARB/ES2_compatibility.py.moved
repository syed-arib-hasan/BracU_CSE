'''OpenGL extension ARB.ES2_compatibility

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_ES2_compatibility'
_DEPRECATED = False
GL_FIXED = constant.Constant( 'GL_FIXED', 0x140C )
GL_IMPLEMENTATION_COLOR_READ_TYPE = constant.Constant( 'GL_IMPLEMENTATION_COLOR_READ_TYPE', 0x8B9A )
GL_IMPLEMENTATION_COLOR_READ_FORMAT = constant.Constant( 'GL_IMPLEMENTATION_COLOR_READ_FORMAT', 0x8B9B )
GL_LOW_FLOAT = constant.Constant( 'GL_LOW_FLOAT', 0x8DF0 )
GL_MEDIUM_FLOAT = constant.Constant( 'GL_MEDIUM_FLOAT', 0x8DF1 )
GL_HIGH_FLOAT = constant.Constant( 'GL_HIGH_FLOAT', 0x8DF2 )
GL_LOW_INT = constant.Constant( 'GL_LOW_INT', 0x8DF3 )
GL_MEDIUM_INT = constant.Constant( 'GL_MEDIUM_INT', 0x8DF4 )
GL_HIGH_INT = constant.Constant( 'GL_HIGH_INT', 0x8DF5 )
GL_SHADER_COMPILER = constant.Constant( 'GL_SHADER_COMPILER', 0x8DFA )
GL_NUM_SHADER_BINARY_FORMATS = constant.Constant( 'GL_NUM_SHADER_BINARY_FORMATS', 0x8DF9 )
GL_MAX_VERTEX_UNIFORM_VECTORS = constant.Constant( 'GL_MAX_VERTEX_UNIFORM_VECTORS', 0x8DFB )
GL_MAX_VARYING_VECTORS = constant.Constant( 'GL_MAX_VARYING_VECTORS', 0x8DFC )
GL_MAX_FRAGMENT_UNIFORM_VECTORS = constant.Constant( 'GL_MAX_FRAGMENT_UNIFORM_VECTORS', 0x8DFD )
glReleaseShaderCompiler = platform.createExtensionFunction( 
'glReleaseShaderCompiler',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(),
doc='glReleaseShaderCompiler() -> None',
argNames=(),
deprecated=_DEPRECATED,
)

glShaderBinary = platform.createExtensionFunction( 
'glShaderBinary',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLsizei,arrays.GLuintArray,constants.GLenum,ctypes.c_void_p,constants.GLsizei,),
doc='glShaderBinary(GLsizei(count), GLuintArray(shaders), GLenum(binaryformat), c_void_p(binary), GLsizei(length)) -> None',
argNames=('count','shaders','binaryformat','binary','length',),
deprecated=_DEPRECATED,
)

glGetShaderPrecisionFormat = platform.createExtensionFunction( 
'glGetShaderPrecisionFormat',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLenum,arrays.GLintArray,arrays.GLintArray,),
doc='glGetShaderPrecisionFormat(GLenum(shadertype), GLenum(precisiontype), GLintArray(range), GLintArray(precision)) -> None',
argNames=('shadertype','precisiontype','range','precision',),
deprecated=_DEPRECATED,
)

glDepthRangef = platform.createExtensionFunction( 
'glDepthRangef',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLclampf,constants.GLclampf,),
doc='glDepthRangef(GLclampf(n), GLclampf(f)) -> None',
argNames=('n','f',),
deprecated=_DEPRECATED,
)

glClearDepthf = platform.createExtensionFunction( 
'glClearDepthf',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLclampf,),
doc='glClearDepthf(GLclampf(d)) -> None',
argNames=('d',),
deprecated=_DEPRECATED,
)


def glInitEs2CompatibilityARB():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
